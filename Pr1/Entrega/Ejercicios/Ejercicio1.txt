/*
Ejercicio 1: Analizar el código del programa show_file.c, que lee byte a byte el contenido
de un fichero, cuyo nombre se pasa como parámetro, y lo muestra por pantalla usando funcio-
nes de la biblioteca estandar de “C”. Responda a las siguientes preguntas:
*/
/*
int main(int argc, char* argv[]) {
	FILE* file=NULL;
	int c,ret;

	if (argc!=2) {
		fprintf(stderr,"Usage: %s <file_name>\n",argv[0]);
		exit(1);
	}

	//Open file
	if ((file = fopen(argv[1], "r")) == NULL)
		err(2,"The input file %s could not be opened",argv[1]);

	// Read file byte by byte
	while ((c = getc(file)) != EOF) {
		//Print byte to stdout
		ret=putc((unsigned char) c, stdout);

		if (ret==EOF){
			fclose(file);
			err(3,"putc() failed!!");
		}
	}
	fclose(file);
	return 0;
}
*/



/*
¿Qué comando se debe emplear para generar el ejecutable del programa (show_file)
invocando directamente al compilador gcc (sin usar make)?

 gcc [ opción | archivo ]
 siendo el archivo el archivo a compilar la opcion la opcion de salida, genera un ejecutable
 gcc -o [nombreejecutablegenerado][nombreArchivo.c]


Indique dos comandos para llevar a cabo respectivamente la compilación del programa
(generación de fichero objeto) y el enlazado del mismo de forma independiente.

	compilacion del programa: (generar el archivo objeto)
		gcc -c [archivo] se genera el archivo.o a partir del archivo.c
	enlazado:
		para enlazar el programa y por consiguiente obtener su salida,

		gcc -o [ejecutableAgenrar] [nombreArchivoObjeto.o]
		esto generela el ejecutable que se utilizara para el comando ./
		./[ejecutableAgenrar] tras la compilacion



Realice las siguientes modificaciones en el programa show_file.c:
Realizar la lectura byte a byte del fichero de entrada empleando la función fread() en
lugar de getc(). Modificar también la invocación a la función putc() por una llamada
a fwrite()
*/
/*
 int main(int argc, char* argv[]) {
	FILE* file=NULL;
	int c,ret;

	if (argc!=2) {
		fprintf(stderr,"Usage: %s <file_name>\n",argv[0]);
		exit(1);
	}

	//Open file
	if ((file = fopen(argv[1], "r")) == NULL)
		err(2,"The input file %s could not be opened",argv[1]);

	// Read file byte by byte
	while ((fread(&c,sizeof(char),1,file))>0) { //fwrite  devuelve =0 cuando ha llegado al fin del archivo.
		//Print byte to stdout
		ret=fwrite(&c,sizeof(char),1, stdout);

		if (ret>0){
			fclose(file);
			err(3,"fwrite() failed!!");
		}
	}


/*
Añadir un parámetro al programa modificado para permitir al usuario especificar el ta-
maño de bloque en bytes a usar en cada lectura realizada por fread().
*/
/*
 int main(int argc, char* argv[]) {
	FILE* file=NULL;
	int c,ret;

	if (argc!=2) {
		fprintf(stderr,"Usage: %s <file_name>\n",argv[0]);
		exit(1);
	}

	//Open file
	if ((file = fopen(argv[1], "r")) == NULL)
		err(2,"The input file %s could not be opened",argv[1]);

	char* msg="Introduce el numero de bytes que quieres leer:";
	printf("%s",msg);
	scanf("%d",&nBytes);


	while ((fread(&c,sizeof(char),nBytes,file))>0) {
		//Print byte to stdout
		ret=fwrite(&c,sizeof(char),nBytes, stdout);

		if (ret<0){
			fclose(file);
			err(3,"fwrite() failed!!");
		}
	}
*/





